if(rootProject.ext.android.is_applicaion){
    apply plugin: 'com.android.application'
}else{
    apply plugin: 'com.android.library'
}



android {


    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        if(rootProject.ext.android.is_applicaion){
            apply plugin: 'com.android.application'
            applicationId "com.example.login"
        }

        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    //  sourceSets    设置 加载的文件路劲
    sourceSets{
        main{
            if(rootProject.ext.android.is_applicaion){
                manifest.srcFile 'src/main/AndroidManifest.xml'
                java.srcDir 'src/main/module' // 这个组件是 applcation 时 将 module 文件夹 设置为  java文件
            }else{
                manifest.srcFile 'src/main/manifest/AndroidManifest.xml'

            }
        }
    }
}

dependencies {
    implementation  rootProject.ext.dependencies.publicfileTree
    implementation rootProject.ext.dependencies.publicimplementation
//    implementation project(path: ':arouter')

    //    依赖注解 处理器
    annotationProcessor  project(path: ':annotation_compiler')


    testImplementation rootProject.ext.dependencies.publictestImplementation
    androidTestImplementation rootProject.ext.dependencies.publicandroidTestImplementation


//    implementation project(rootProject.ext.dependencies.commonlibrry)
    rootProject.ext.dependencies.commonlibrry.each{
        implementation project(it)
    }



}
